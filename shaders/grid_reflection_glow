from bge import logic as g
from bge import render as r
import bgl

cont = g.getCurrentController()
own = cont.owner

VertexShader = """

attribute vec4 Tangent;
varying vec3 T, B, N;


void main()
{
	vec3 pos = vec3(gl_Vertex);

	T   = Tangent.xyz;
	B   = cross(gl_Normal, Tangent.xyz);
	N   = gl_Normal;

	gl_TexCoord[1] = ftransform();
    gl_TexCoord[2].xyz = pos - gl_ModelViewMatrixInverse[3].xyz;
    gl_TexCoord[0] = gl_MultiTexCoord0*0.5+0.5;
    gl_Position = ftransform();
}

"""

FragmentShader = """

varying vec3 T, B, N;
uniform sampler2D reflection,refraction, normals, diffuse;

float aberration = 0.005;
float bump = 0.2;
float texscale = 200.0;

vec3 TangentSpace(vec3 v)
{
	vec3 vec;
	vec.xy=v.xy;
	vec.z=sqrt(1.0-dot(vec.xy,vec.xy));
	vec.xyz= normalize(vec.x*T+vec.y*B+vec.z*N);
	return vec;
}

int i,j;
void main() {

    vec2 coord = gl_TexCoord[1].xy/gl_TexCoord[1].w*0.5+0.5;

    float cosine = 1.0; 
    float fresnel = 0.98; 

	vec4 glow = vec4(0);
	for (i=-2; i<2; i++)
	{
		for (j=-2; j<2; j++)
		{
			//glow += texture2D(reflection, coord+nVec.st+vec2(j,i)*0.0016) /16;
			glow += texture2D(reflection, coord+vec2(j,i)*0.0016) /16.0;
		}
	}
    vec3 reflect = glow.rgb;

    vec3 luminosity = vec3(0.30, 0.59, 0.11);
	float reflectivity = pow(dot(luminosity, reflect.rgb),5.0);

    vec4 diffuse = texture2D(diffuse, gl_TexCoord[0].st*texscale).rgba;
    vec3 color = mix(diffuse.rgb*vec3(1.0,4.0,7.0), reflect, clamp(fresnel+reflectivity,0.7,0.98));

    gl_FragColor = vec4(color,0.3);
}
"""

mesh = own.meshes[0]
for mat in mesh.materials:
	shader = mat.getShader()
	if shader != None:
		if not shader.isValid():
			shader.setSource(VertexShader, FragmentShader, 1)
		shader.setAttrib(g.SHD_TANGENT)
		shader.setSampler('reflection',0)
		#shader.setSampler('refraction',1)
		#shader.setSampler('normals',2)
		shader.setSampler('diffuse',1)
